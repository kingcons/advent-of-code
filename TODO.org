* DONE - Automate away the tedious editing of individual year defsections in main.lisp  similar to how I automated away the same editing in overview.lisp. This would make it so a new day only touches: advent.asd, dayNN.lisp, dayNN.dat. The primary problem I can think of is that since these are directly referenced as separate sections in the top-level @advent there may not be a good way to include them short of grouping all the years under another section called "Years" or something. On the bright side, that may prevent us nesting down to the level of Part 1, Part 2. Probably worth it to me.
* DONE - Move the compile-time helpers from main to utils. Or maybe a separate file?
** Seems like in most scenarios the separate file gets you out of the eval-when headaches and there isn't sufficient benefit to keeping the helper right next to the macro. Could be wrong.
* DONE - Redistribute the performance summaries throughout the problems.
** Having a big overview block seems like a nice idea but I rarely look at that so why would anyone else? It probably makes more sense to have them in each individual defsection ... somehow. May want to autogenerate summaries with a defsummary macro or something in aoc.util. We'll see...
* DONE - Refactor the callsites of READ-DAY-UTIL :WHOLE to receive the entire file before splitting.
** It would be nice to rip the WHOLE option out altogether. Aside from simplifying the interface to READ-DAY-UTIL this enables moving off READ-FILE-FROM-STRING.
** Seems like the real problem here is two "grid" problems from 2021, days 9 and 11. We really do need the whole input so this would strictly increase the accidental complexity of those problems if we removed the option. :-/
* DONE - Separate the "build" and "compute" stages of puzzles.
** I.e. In 99% of cases, the data parsing between Part 1 and Part 2 is identical and it is valuable not only to know the timing of "Part 1" vs "Part 2" but the timing and memory use of "Parsing the data", "Computing part 1", and "Computing part 2".
** This is currently in progress and the unstaged changes in this tree reflect the current state. Using a decomposition of PART-1, PART-2, and BUILD-DATA greatly simplifies the tests as they can pass input directly to PART-1 and PART-2 which forward on to READ-DAY-INPUT and tests don't concern themselves with any internals.
* DONE - Update the 2019 - 2021 problems to use the BUILD-DATA style and incorporate in DEFSUMMARY.
** Currently our summaries do not take into account the newly separate BUILD-DATA function. In fact, the decomposition is not quite right in that PART-1 and PART-2 call BUILD-DATA internally distorting any efforts to separate the parsing work from the computational work.
** First, update _all_ problems to use BUILD-DATA and have PART-1 and PART-2 take a parsed data argument.
** Second, update all tests to pass parsed data in to PART-1 and PART-2.
** Third, have DEFSUMMARY generate summarize output for BUILD-DATA.
** Finally, update the day.tmpl file for the new scheme.
* DONE - Remove usage of GRAPH library from 2020.07
** Then we can strip from the project / remove from advent.asd
* TODO - Refactor 2022 Day 07. At least two things about my solution are less than ideal.
** First, declaring a variable special to avoid the pain of passing it is gross.
** Second, needed-space separates reparses the directory sizes. UGH.
** In my head, it would be nice if each line in the output had an "opcode" it could execute on some data structure. Not sure that actually structuring it as an interpreter helps a ton though.
* TODO - Currently DEFSUMMARY is a kludge to generate DEFSECTIONs for MGL-PAX.
** While being pragmatic, it would probably be preferable to see if there's some way to use the extension API for MGL-PAX to add a new locative type or similar to accomodate the same goals.*
* TODO - Refactor 2022.13 to use named-readtables instead of regexes to parse.
* TODO - Weird limitations of MGL-PAX that need to be fixed.
** It can locate regular structures, e.g. `(defstruct point ..) via `(point class)` locative.
But it cannot locate structures with constructor options (type, conc-name, etc).
** An end argument cannot be omitted from include locatives.
As a result, I cannot include any part-2 function bodies in the output.
** It cannot locate esrap rules since they macroexpand to toplevel function calls.
A crude workaround is to define a `*parser*` variable for the rule that is used in
`read-day-input` and write the rules in "top-down" order. No variable should be needed.
